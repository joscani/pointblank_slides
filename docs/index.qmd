---
title: "Validación de datos con pointblank"
subtitle: "\"Usando el paquete `pointblank` en `Spark`\""
author: "Cañadas Reche, José Luis"
institute: "Grupo usuarios de R Madrid"
date: "2023-06-29"
date-format: iso
format:
  revealjs: 
    slide-number: true
    theme: theme.scss
    css: theme.css
    linkcolor: "#1a1a1a"
    highlight-style: github
    code-copy: true
    code-link: true
    code-overflow: wrap
    code-block-bg: true
    transition: fade
    width: 1600
editor: source
title-slide-attributes: 
  data-background-image: "images/esferas.jpeg"
  data-background-size: "45%"
  data-background-position: "right"
---

## [Sobre mi]{style="color: #000000;"} {.dark background-color="#333333"}

<br>

::: columns
::: {.column width="40%"}
![](images/profile2.jpg){#headshot height="500px"}
:::

::: {.column width="60%"}
-   Soy José Luis Cañadas Reche 👋
-   Data Scientist/ Estadístico 💻
-   ️Orange Spain 🍊
:::
:::

## <span style="color: #ffffff;">Qué quiero contar {.light background-color="#ffffff"}

::: incremental
<br>

-   Me he copiado en gran parte de [aquí](https://meghansaha.github.io/exploring_validation/#/title-slide)

-   ¿Qué es validación de datos y por qué hay que ser cuidadosos?

-   Diferentes tipos de validación

-   ¿Qué es `pointblank`?

-   ¿Por qué `pointblank`?

-   `pointblank` en big data
:::

## [Aviso !!]{style="color: #000000;"} {.dark background-color="#333333"}

<br>

::: columns
::: {.column width="60%"}
<h1 style="margin-top:5%">

Estoy empezando a probar `pointblank`. No tengo mucha más idea de lo que voy descubriendo al hacer estas slides

</h1>
:::

::: {.column width="30%"}
![](images/not_expert.jpeg){.memes width="250px" height="400px"}
:::
:::

##  {.trans background-color="#ffffff" background-image="images/trans1.png" background-size="65%"}

<h1>

<center>[¿Validación?<br> ¿y por qué?]{style="color: #ffffff;"}</center>

</h1>

## <span style="color: #ffffff;">¿Validación? ¿y por qué? {.light background-color="#ffffff"}

**Validación**: Chequear que algo que pensamos que está bien efectivamente lo esté

<br>

::: fragment
Hablando de datos podría ser cosas como:
:::

::: incremental
-   Testear los datos de entrada
-   Testear los datos de salida
-   Testear los flujos de creación de datos
-   Reglas de datos, etc.
:::

## <span style="color: #ffffff;">Importancia de las validaciones {.light background-color="#ffffff" transition="none"}

> Y esto es importante porque....

::: columns
::: {.column width="50%"}
<br>

::: incremental
-   Asunciones incorrectas sobre los datos puede ser costoso
-   Los datos del mundo real en las empresas reales están mal... si, en todas
-   Es muy probable que no haya ningún control, por mucho que te digan que todo está bien
:::
:::

::: {.column width="5%"}
:::

::: {.column width="45%"}
::: fragment
![](images/edades_negativas.jpg){.memes width="300px" height="450px"}
:::
:::
:::

##  {.transdark background-color="#333333" background-image="images/trans2.png" background-size="65%"}

<h1>

<center>[Tipos de <br>Validaciones]{style="color: #000000;"}</center>

</h1>

## [Tipos de validación. Ejemplos]{style="color: #000000;"} {.dark background-color="#333333"}

::: panel-tabset
## Tipos de variables

::: columns
::: {.column width="50%"}
<h3>Tipo de la variable</h3>

*"¿La variable es del tipo correcto"*

<br>

**Example:** - A veces vienen datos que parecen un número y no lo son.
:::

::: {.column width="50%"}
<br>

::: fragment
```{r vartype, echo = TRUE}

# Check de variable R
anyo_actual_number <- 2023
falso_numero <- "2023"

#Actual Number?
is.numeric(anyo_actual_number)

#Actual Number?
is.numeric(falso_numero)

```
:::
:::
:::

## Valores esperados/ permitidos

::: columns
::: {.column width="50%"}
<h3>Valor esperado</h3>

*"¿Es el valor de la variable el que se espera?"*

<br>

**Ejemplo:** - ¿Se puede chequear que el valor de la variable tiene sentido según el contexto?
:::

::: {.column width="50%"}
<br>

::: fragment
```{r expvalue, echo = TRUE}

edad <- -70

# ¿Es la edad numérica y con valores positivos? 
is.numeric(edad) & edad > 0 

```
:::
:::
:::

## Datos perdidos

::: columns
::: {.column width="50%"}
<h3>Datos perdidos</h3>

*"¿hay algún dato perdido que debería estar informado?*

<br>

**Ejemplo:** - ¿Faltan datos perdidos en id / pk ?
:::

::: {.column width="50%"}
::: fragment
```{r missingdata_prep, echo = FALSE}
# Missing Data Check - Base R
clientes <- data.frame("customer_id" = c(123,345,NA),
                           "tarifa_tele" = c("Si","No", "No"))

```

```{r missingdata, echo = TRUE}
clientes

# ¿Hay algún dlientes sin id y que no tenga tafifa tele
which(is.na(clientes$customer_id)) == which(clientes$tarifa_tele == "No")

```
:::
:::
:::

## Checks logicos

::: columns
::: {.column width="50%"}
<h3>Check lógicos</h3>

*"¿los nuevos datos se corresponden con los antiguos?"*
:::

::: {.column width="50%"}
<br>

::: fragment
```{r logig_prep, echo =FALSE}

viejos_datos <- data.frame(id = sample(1:10))
nuevos_datos <- data.frame(id = sample(1:10))

```

```{r logicheck, echo = TRUE}

# Son los datos distintos ? 

!identical(viejos_datos, nuevos_datos)

```
:::
:::
:::

## Duplicados

::: columns
::: {.column width="50%"}
<h3>Duplicados</h3>

*"¿Hay duplicados? ¿son únicas las pk?*
:::

::: {.column width="50%"}
<br>

::: fragment
```{r duplicated_pred, echo =TRUE}

anyDuplicated(clientes$customer_id)==0

```

:::
:::
:::

## Longitud de strings

::: columns
::: {.column width="50%"}
<h3>Longitud de strings</h3>

*"¿Hay números de teléfonos de longitud errónea?"*
:::

::: {.column width="50%"}
<br>

::: fragment
```{r prep_strin, echo =FALSE}

clientes$tlf <- c("555945421", "55509082", "5559421")

```

```{r}
clientes
```

```{r, string_length, echo = TRUE}

sapply(clientes$tlf, function(x) nchar(x) == 9)

```

:::
:::
:::

## Formato

::: columns
::: {.column width="50%"}
<h3>Formato</h3>

*"Me pasan una fecha, pero ¿está en formato correcto?"*
:::

::: {.column width="50%"}
<br>

::: fragment
```{r format_prep, echo =FALSE}

dates <- c("2023-24-02", "1976/12/12", "02-15-1941")

```



```{r format_check, echo = TRUE}
dates

library(lubridate)
!is.na(parse_date_time(dates,orders="ymd"))

```

:::
:::
:::

## Rango de valores 

::: columns
::: {.column width="50%"}
<h3>Rango de valores </h3>

*"El rango de mi variable se corresponde con lo que se espera"*
:::

::: {.column width="50%"}
<br>

::: fragment
```{r range_prep, echo =FALSE}
set.seed(167)
clientes$edad <- sample(c(5, 15, 59, 35, 90 ), 3)

```


```{css echo=FALSE}
.small-code{
  font-size: 80%  
}
```
<div class=small-code>
```{r range_check, echo = TRUE}

clientes$gt_18_lt_65 <- sapply(clientes$edad, 
                               function(x) x >= 18 & x <= 65)

clientes
```

</div>
:::
:::
:::



:::

##  {.trans background-color="#ffffff" background-image="images/trans3.png" background-size="65%"}

<h1>

<center>[¿Qué es esto de `pointblank`?]{style="color: #ffffff;"}</center>

</h1>

## <span style="color: #ffffff;">¿Qué es esto de `pointblank`? {.light background-color="#ffffff"}

<br> Pointblank es un paquete de R creado por [Rich Iannone](https://twitter.com/riannone) (author/maintainer) y Mauricio Vargas (author). Esta librería permite hacer validaciones y mantener un seguimiento de las mismas en R.

Se puede utilizar con dataframes o con orígenes remotos de datos como postgress, mysql, duckdb o incluso con sistemas distribuidos como spark

[![](images/logo.svg){fig-alt="pointblank" fig-align="center"}](https://rich-iannone.github.io/pointblank/reference/index.html)

## <span style="color: #ffffff;">¿Qué es esto de `pointblank`? {.light background-color="#ffffff"}

`pointblank` tiene **6** flujos de validación que se pueden ver en los siguientes enlaces.

1.  [VALID-I: Data Quality Reporting](https://rich-iannone.github.io/pointblank/articles/VALID-I.html)

2.  [VALID-II: Pipeline Data Validation](https://rich-iannone.github.io/pointblank/articles/VALID-II.html)

::: {.fragment .semi-fade-out}
3.  [VALID-III: Expectations in Unit Tests](https://rich-iannone.github.io/pointblank/articles/VALID-III.html)

4.  [VALID-IV: Data Tests for Conditionals](https://rich-iannone.github.io/pointblank/articles/VALID-IV.html)
:::

::: {.fragment .semi-fade-out}
5.  [VALID-V: Table Scan](https://rich-iannone.github.io/pointblank/articles/VALID-V.html)
:::

::: {.fragment .semi-fade-out}
6.  [VALID-VI: R Markdown Document Validation](https://rich-iannone.github.io/pointblank/articles/VALID-VI.html)
:::

##  {.transdark background-color="#333333" background-image="images/trans4.png" background-size="65%"}

<h1>

<center>[¿Por qué `pointblank`?]{style="color: #000000;"}</center>

</h1>

## <span style="color: #000000;">¿Por qué `pointblank`? {.dark background-color="#333333"}

> Existen otras librerías como  [`validate`](https://github.com/data-cleaning/validate) or [`testthat`](https://testthat.r-lib.org/) para validación y test. 

:::fragment
* `pointblank` permite hacer lo mismo, pero permite hacer reporting fácilmente. 
* Filosofía `tidyverse`
* Permite orígenes remotos de datos usando DBI
* Se puede utilizar en Bigdata usando `sparklyr` (me centraré en esa parte)
:::

##  {.trans background-color="#ffffff" background-image="images/trans5.png" background-size="100%"}

<h1>

<center>[`pointblank` en Spark]{style="color: #ffffff;"}</center>

</h1>


## <span style="color: #ffffff;">`pointblank` en Spark {.light background-color="#ffffff"}

### Datos de ejemplo:

```{r spark_read_data, echo = TRUE,  `code-line-numbers`="3|7-11"}
library(tidyverse)
library(sparklyr)
library(pointblank)

nyc_dir <-  "/media/hd1/nyc-taxi/"

sc <- spark_connect(master = "local",
                    spark_home = "~/spark/spark-3.3.2-bin-hadoop2/")

nyc_tabla <- sc  |>  
    spark_read_parquet(str_glue("{nyc_dir}year=2020/month=1/part-0.parquet"))

nyc_tabla

```


## <span style="color: #ffffff;">`pointblank` en Spark. Crear agente {.light background-color="#ffffff"}

![](images/VALID-I.svg)

## <span style="color: #ffffff;">`pointblank` en Spark. Crear agente {.light background-color="#ffffff"}

::: columns
::: {.column width="70%"}
### Encadenar reglas

```{r create_agent1,  echo = TRUE, results='hide', `code-line-numbers`="1-5|6-8"}
agent <- 
    create_agent(
        tbl = nyc_tabla,
        tbl_name = "big_tabla_nyc"
    )  |>
    col_is_posix(vars(pickup_datetime))  |>
    col_vals_gt(vars(passenger_count), value = 0)  |>
    col_vals_gt(vars(trip_distance), value = 0)
```
:::

::: {.column width="1%"}
:::

::: {.column width="29%"}
### Pasos

1.  Se crea un "Agente"
2.  Se añaden [reglas de validación](https://rich-iannone.github.io/pointblank/articles/VALID-I.html)
:::
:::

## <span style="color: #ffffff;">`pointblank` en Spark. Interrogatorio {.light background-color="#ffffff"}

::: columns
::: {.column width="70%"}
### Interrogar al agente

```{r agente_inter, echo = TRUE, results='hide', `code-line-numbers`="11-13"}

# crear agente
agent <- 
    create_agent(
        tbl = nyc_tabla,
        tbl_name = "big_tabla_nyc"
    )  |>
    col_is_posix(vars(pickup_datetime))  |>
    col_vals_gt(vars(passenger_count), value = 0)  |>
    col_vals_gt(vars(trip_distance), value = 0)

# preguntar 
agent  |>
  interrogate()

```
:::

::: {.column width="1%"}
:::

::: {.column width="29%"}
### Pasos

1.  Se crea un "Agente"
2.  Se añaden [reglas de validación](https://rich-iannone.github.io/pointblank/articles/VALID-I.html)
3.  Interrogar al agente
:::
:::

## <span style="color: #ffffff;">`pointblank` en Spark. Informe {.light background-color="#ffffff"}

::: columns
::: {.column width="60%"}
### Ver resultado

![](images/res1.png)
:::

::: {.column width="40%"}
<center><br><br><br> **Date/Time/Object Metadata**</center>
:::
:::

## <span style="color: #ffffff;">`pointblank` en Spark. Tidyselect {.light background-color="#ffffff"}

::: columns
::: {.column width="70%"}
### Varias columnas y sintaxis tidyselect

```{r agente_inter_2, echo = TRUE, results='hide', `code-line-numbers`="7-10|13-14"}

agent2 <- 
    create_agent(
        tbl = nyc_tabla,
        tbl_name = "big_tabla_nyc"
    )  |>
    col_is_posix(pickup_datetime)  |>
    col_vals_gt(tip_amount:total_amount, value = 0)  |>
    col_vals_gt(c(pickup_location_id, dropoff_location_id), value = 0)|> 
    col_vals_between(trip_distance, left = 0, right = 200, inclusive = c(FALSE, TRUE))

# preguntar 
agent2  |>
  interrogate()

```
:::

::: {.column width="1%"}
:::

::: {.column width="29%"}

### Syntactic sugar 

1.  var1:var20 
2.  c(var1, var30) sin  comillas
:::
:::

## <span style="color: #ffffff;">`pointblank` en Spark. Informe  {.light background-color="#ffffff"}

### Ver resultado

![](images/res2.png)

## <span style="color: #ffffff;">`pointblank` en Spark. Action levels {.light background-color="#ffffff"}

::: columns
::: {.column width="60%"}
### Action levels

```{r action_levels, echo = TRUE, results='hide', `code-line-numbers`="1-4|6-15"}
al <- action_levels(
    warn_at = 0.05,
    stop_at = 0.2
) 

agent2_with_al <- 
    create_agent(
        tbl = nyc_tabla,
        tbl_name = "big_tabla_nyc", 
        actions = al
    )  |>
    col_is_posix(pickup_datetime)  |>
    col_vals_gt(tip_amount:total_amount, value = 0)  |>
    col_vals_gt(c(pickup_location_id, dropoff_location_id), value = 0)|> 
    col_vals_between(trip_distance, left = 0, right = 200, inclusive = c(FALSE, TRUE))

# preguntar 
agent2_with_al  |>
  interrogate()

```
:::

::: {.column width="1%"}
:::

::: {.column width="39%"}

<br>

1. Entre 0 y 1 ➡ Warning cuando se supera la proporción de casos que incumple la regla
2.  Mayor que 1  ➡ Warning cuando se incumple la regla en n casos. 
3. Se pueden especificar actions levels en cada variable, pero la de stop_at se comporta diferente ➡ Se interrumpe el flujo
:::
:::

## <span style="color: #ffffff;">`pointblank` en Spark. Action levels {.light background-color="#ffffff"}

### Con `action levels`

![](images/res3.png)


## <span style="color: #ffffff;">`pointblank` en Spark. Reutilizar {.light background-color="#ffffff"}

::: columns
::: {.column width="70%"}
### Usar el agente en otra tabla

```{r agente_set_table, echo = TRUE, results='hide', `code-line-numbers`="1-2|5-6|7-10"}

nyc_tabla_202201 <-  sc  |>  
    spark_read_parquet(str_glue("{nyc_dir}year=2022/month=1/part-0.parquet")) 


nuevo_agente <-  agent2_with_al |> 
    set_tbl(nyc_tabla_202201, 
            tbl_name = "Validacion Enero 2022") 

# preguntar 
nuevo_agente  |>
  interrogate()

```
:::

::: {.column width="1%"}
:::

::: {.column width="29%"}

<br>

1. Simplemente se "setea" nueva tabla
2. Se interroga al agente para devolver el informe
:::
:::

## <span style="color: #ffffff;">`pointblank` en Spark. Informe {.light background-color="#ffffff"}

### Nuevo reporte

![](images/res4.png)


## <span style="color: #ffffff;">`pointblank` en Spark. Limitaciones {.light background-color="#ffffff"}

::: incremental
* Hay más opciones si  se trabaja con data.frames o conexiones a bases de datos
    * Guardar especificaciones del agente en yaml
    * Guardar cadenas de conexión en yaml
* Crear un informe de la tabla con `scan_data`
* Pasar validaciones a tabla sin crear agente (en spark no funciona)
* Utilizar `pointblank` para test unitarios
:::


## <span style="color: #ffffff;">`pointblank` en Spark. Guardar{.light background-color="#ffffff"}

::: columns
::: {.column width="70%"}
### Guardar agente 

```{r agente_save_disk, echo = TRUE, results='hide', `code-line-numbers`="1"}

x_write_disk(agent2_with_al, filename = "agente_nyc.rds")

spark_disconnect(sc)
```
:::

::: {.column width="1%"}
:::

::: {.column width="29%"}

<br>

1. La mejor forma (si queremos usarlo en spark) es guardar como objeto serializado.
2. Lo usaremos en nueva sesión de spark
:::
:::


## <span style="color: #ffffff;">`pointblank` en Spark. Leer {.light background-color="#ffffff"}

::: columns
::: {.column width="70%"}
### Leerlo

```{r agente_read_from_disk, echo = TRUE, results='hide', `code-line-numbers`="1-2|4-5|8"}

sc <- spark_connect(master = "local",
                    spark_home = "~/spark/spark-3.3.2-bin-hadoop2/")

nyc_tabla_nueva <- sc  |>  
    spark_read_parquet(str_glue("{nyc_dir}year=2022/month=2/part-0.parquet"))


agente_from_disk <-  x_read_disk(filename = "agente_nyc.rds")

```
:::

::: {.column width="1%"}
:::

::: {.column width="29%"}

<br>

1. Nueva sesión de spark
2. Leemos agente guardado
:::
:::

## <span style="color: #ffffff;">`pointblank` en Spark. Interrogar{.light background-color="#ffffff"}

::: columns
::: {.column width="70%"}
### Leerlo

```{r agente_from_disk_interrogate, echo = TRUE, results='hide', `code-line-numbers`="1-3"}
agente_from_disk  |> 
    set_tbl(nyc_tabla_nueva) |> 
    interrogate()

```
:::

::: {.column width="1%"}
:::

::: {.column width="29%"}

<br>

1. Nueva sesión de spark
2. Leemos agente guardado
:::
:::

## <span style="color: #ffffff;">`pointblank` en Spark. resultado{.light background-color="#ffffff"}



![](images/res5.png){width=120%}



## <span style="color: #ffffff;">`pointblank` en Spark. Multiagentes{.light background-color="#ffffff"}

::: incremental

* Unir varios agentes en uno
* Poder salvar  en un solo objeto
* Ejemplos:
    * Unir diferentes agentes que interrogan a tablas distintas
    * Unir agentes que interrogan misma tabla, pero varias cosas 
:::