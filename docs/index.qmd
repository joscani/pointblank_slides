---
title: "Validaci√≥n de datos con pointblank"
subtitle: "\"With The  `pointblank`  Package\""
author: "Ca√±adas Reche, Jos√© Luis"
institute: "Grupo usuarios de R Madrid"
date: "2023-06-29"
format:
  revealjs: 
    slide-number: true
    theme: theme.scss
    css: theme.css
    linkcolor: "#1a1a1a"
    highlight-style: github
    code-copy: true
    code-link: true
    code-overflow: wrap
    code-block-bg: true
    transition: fade
    width: 1600
editor: source
title-slide-attributes: 
  #data-background-image: "images/title_back.PNG"
  data-background-size: "45%"
  data-background-position: "right"
---

## [Sobre mi]{style="color: #000000;"} {.dark background-color="#333333"}

<br>

::: columns
::: {.column width="40%"}
![](images/profile2.jpg){#headshot}
:::

::: {.column width="60%"}
-   Soy Jos√© Luis Ca√±adas üëãüèæ
-   Data Scientist/ Estad√≠stico üíª
-   Ô∏èOrange Spain üçä
:::
:::

## <span style="color: #ffffff;">Qu√© quiero contar {.light background-color="#ffffff"}

::: incremental
<br>

-   Me he copiado en gran parte de [aqu√≠](https://meghansaha.github.io/exploring_validation/#/title-slide)

-   ¬øQu√© es validaci√≥n de datos y por qu√© hay que ser cuidadosos?

-   Diferentes tipos de validaci√≥n

-   ¬øQu√© es `pointblank`?

-   ¬øPor qu√© `pointblank`?

-   `pointblank` en big data
:::

## [Aviso !!]{style="color: #000000;"} {.dark background-color="#333333"}

<br>

::: columns
::: {.column width="60%"}
<h1 style="margin-top:5%">

Estoy empezando a probar `pointblank`. No tengo mucha m√°s idea de lo que voy descubriendo al hacer estas slides

</h1>
:::

::: {.column width="30%"}
![](images/not_expert.jpeg){.memes width="250px" height="400px"}
:::
:::

##  {.trans background-color="#ffffff" background-image="images/trans1.png" background-size="65%"}

<h1>

<center>[¬øValidaci√≥n?<br> ¬øy por qu√©?]{style="color: #ffffff;"}</center>

</h1>

## <span style="color: #ffffff;">¬øValidaci√≥n? ¬øy por qu√©? {.light background-color="#ffffff"}

**Validaci√≥n**: Chequear que algo que pensamos que est√° bien efectivamente lo est√© 

<br>

::: fragment
Hablando de datos podr√≠a ser cosas como:
:::

::: incremental
-   Testear los datos de entrada
-   Testear los datos de salida
-   Testear los flujos de creaci√≥n de datos
-   Reglas de datos, etc. 
:::



## <span style="color: #ffffff;">Importancia de las validaciones {.light background-color="#ffffff" transition="none"}

> Y esto es importante porque.... 

:::columns
::: {.column width="50%"}
<br>

::: incremental
-   Asunciones incorrectas sobre los datos puede ser costoso
-   Los datos del mundo real en las empresas reales est√°n mal... si, en todas
-   Es muy probable que no haya ning√∫n control, por mucho que te digan que todo est√° bien

:::
:::
::: {.column width="50%"}
:::fragment
![](images/edades_negativas.jpg)
:::
:::
:::




##  {.transdark background-color="#333333" background-image="images/trans2.png" background-size="65%"}

<h1>

<center>[Tipos de <br>Validaciones]{style="color: #000000;"}</center>

</h1>


## [Tipos de validaci√≥n. Ejemplos]{style="color: #000000;"} {.dark background-color="#333333"}

::: panel-tabset
## Tipos de variables (poner icono)
:::columns
::: {.column width="50%"}
<h3>Variable Type</h3>

*"Is this variable the same class/type we are expecting?"*

<br>

**Example:** - Is R reading this as a numeric or integer variable, or is it just a string impostor?
:::

::: {.column width="50%"}
<br>

::: fragment
```{r vartype, echo = TRUE}

# Variable Type Check - Base R
actual_number <- 2023
fake_number <- "2023"

#Actual Number?
is.numeric(actual_number)

#Actual Number?
is.numeric(fake_number)

```
:::
:::
:::

## Datos perdidos

## Duplicados

## Longitud strings

## Formato

## Rango de valores

## siete

## ocho
:::


##  {.trans background-color="#ffffff" background-image="images/trans3.png" background-size="65%"}

<h1>

<center>[¬øQu√© es esto de  `pointblank`?]{style="color: #ffffff;"}</center>

</h1>



## <span style="color: #ffffff;">¬øQu√© es esto de  `pointblank`? {.light background-color="#ffffff"}

<br> Pointblank  es un paquete de R creado por [Rich Iannone](https://twitter.com/riannone) (author/maintainer) y Mauricio Vargas (author). Esta librer√≠a permite hacer validaciones y mantener un seguimiento de las mismas en R. 

Se puede utilizar con dataframes o con or√≠genes remotos de datos como postgress, mysql, duckdb o incluso con sistemas distribuidos como spark


[![](images/logo.svg){fig-alt="pointblank" fig-align="center"}](https://rich-iannone.github.io/pointblank/reference/index.html)

## <span style="color: #ffffff;">¬øQu√© es esto de  `pointblank`? {.light background-color="#ffffff"}

`pointblank`  tiene  **6** flujos de validaci√≥n que se pueden ver en los siguientes enlaces.

1.  [VALID-I: Data Quality Reporting](https://rich-iannone.github.io/pointblank/articles/VALID-I.html)

2.  [VALID-II: Pipeline Data Validation](https://rich-iannone.github.io/pointblank/articles/VALID-II.html)

::: {.fragment .semi-fade-out}
3.  [VALID-III: Expectations in Unit Tests](https://rich-iannone.github.io/pointblank/articles/VALID-III.html)

4.  [VALID-IV: Data Tests for Conditionals](https://rich-iannone.github.io/pointblank/articles/VALID-IV.html)
:::

::: {.fragment .semi-fade-out}
5.  [VALID-V: Table Scan](https://rich-iannone.github.io/pointblank/articles/VALID-V.html)
:::
::: {.fragment .semi-fade-out}
6.  [VALID-VI: R Markdown Document Validation](https://rich-iannone.github.io/pointblank/articles/VALID-VI.html)
:::


##  {.trans background-color="#ffffff" background-image="images/trans5.png" background-size="65%"}

<h1>

<center>[`pointblank` en Spark]{style="color: #ffffff;"}</center>

</h1>


## <span style="color: #ffffff;">`pointblank` en Spark {.light background-color="#ffffff"}

### Datos de ejemplo:

```{r spark_read_data, echo = TRUE,  `code-line-numbers`="3|7-11"}
library(tidyverse)
library(sparklyr)
library(pointblank)

nyc_dir <-  "/media/hd1/nyc-taxi/"

sc <- spark_connect(master = "local",
                    spark_home = "~/spark/spark-3.0.0-bin-hadoop2.7/")

nyc_tabla <- sc |> 
    spark_read_parquet(str_glue("{nyc_dir}year=2020/month=1/part-0.parquet"))

nyc_tabla

```

## <span style="color: #ffffff;">`pointblank` en Spark {.light background-color="#ffffff"}

:::columns
:::{.column width="70%"}
### Encadenar reglas

```{r create_agent1,  echo = TRUE, results='hide', `code-line-numbers`="1-5|6-8"}
agent <- 
    create_agent(
        tbl = nyc_tabla,
        tbl_name = "big_tabla_nyc"
    ) %>%
    col_is_posix(vars(pickup_datetime)) %>%
    col_vals_gt(vars(passenger_count), value = 0) %>%
    col_vals_gt(vars(trip_distance), value = 0)
```


:::
::: {.column width="1%"}
:::

::: {.column width="29%"}
### Pasos

1. Se crea un "Agente"
2. Se a√±aden [reglas de validaci√≥n](https://rich-iannone.github.io/pointblank/articles/VALID-I.html)
:::
:::

## <span style="color: #ffffff;">`pointblank` en Spark {.light background-color="#ffffff"}

:::columns
:::{.column width="70%"}
### Interrogar al agente

```{r agente_inter, echo = TRUE, results='hide', `code-line-numbers`="11-13"}

# crear agente
agent <- 
    create_agent(
        tbl = nyc_tabla,
        tbl_name = "big_tabla_nyc"
    ) %>%
    col_is_posix(vars(pickup_datetime)) %>%
    col_vals_gt(vars(passenger_count), value = 0) %>%
    col_vals_gt(vars(trip_distance), value = 0)

# preguntar 
agent %>%
  interrogate()

```


:::
::: {.column width="1%"}
:::

::: {.column width="29%"}
### Pasos

1. Se crea un "Agente"
2. Se a√±aden [reglas de validaci√≥n](https://rich-iannone.github.io/pointblank/articles/VALID-I.html)
3. Interrogar al agente
:::
:::

## <span style="color: #ffffff;">`pointblank` en Spark {.light background-color="#ffffff"}

:::columns
:::{.column width="60%"}
### Ver resultado 
![](images/res1.png)


:::

::: {.column width="40%"}
<center><br><br><br> **Date/Time/Object Metadata**</center>
:::
:::

